{"version":3,"sources":["store/prefectureData/reducer.js","store/reducers.js","store/types.js","api/nationalStatistics.js","api/index.js","store/prefectureData/saga.js","store/sagas.js","app/dataExplorer/filter/view.jsx","app/dataExplorer/chart/view.jsx","app/dataExplorer/container.jsx","store/prefectureData/actions.js","app/app.jsx","index.js"],"names":["INITIAL_STATE","prefectures","prefectureNameError","prefecturePopulationError","prefectureNamesLoading","prefecturePopulationLoading","combineReducers","prefectureData","state","action","type","prefectureState","prefectureNames","reduce","prefName","prefCode","name","selected","error","populationData","fetchNationalStatistics","path","a","fullUrl","window","fetch","headers","process","response","status","Error","json","result","nationalStatistics","fetchPrefectureNames","fetchPrefecturePopulation","populationType","lowerYearBoundary","upperYearBoundary","populationTypes","total","youth","productiveAge","elderly","data","filter","year","prefectureDataWatcher","api","put","console","shouldFetchPopulation","takeEvery","rootSaga","all","map","watcher","call","Filter","items","onChange","className","Object","entries","id","FormControlLabel","key","control","Checkbox","checked","color","label","colors","Chart","chartData","legendNames","processing","messageOnEmpty","CircularProgress","length","margin","top","right","left","bottom","strokeDasharray","dataKey","tickFormatter","tick","toLocaleString","formatter","value","align","verticalAlign","layout","index","stroke","formatChartData","intermediaryObject","values","forEach","DataExplorerWrapper","children","Paper","mapDispatchToProps","togglePrefecture","connect","useEffect","event","target","sagaMiddleware","createSagaMiddleware","store","createStore","reducers","composeWithDevTools","applyMiddleware","run","App","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.cf8c1b0b.chunk.js","sourcesContent":["import {\n  FETCH_PREFECTURE_NAMES_PROCESSING,\n  FETCH_PREFECTURE_NAMES_SUCCESS,\n  FETCH_PREFECTURE_NAMES_FAILED,\n  PREFECTURE_TOGGLED,\n  FETCH_PREFECTURE_POPULATION_PROCESSING,\n  FETCH_PREFECTURE_POPULATION_SUCCESS,\n  FETCH_PREFECTURE_POPULATION_FAILED\n} from 'store/types'\n\nconst INITIAL_STATE = {\n  prefectures: {},\n  prefectureNameError: '',\n  prefecturePopulationError: '',\n  prefectureNamesLoading: true,\n  prefecturePopulationLoading: false\n}\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case FETCH_PREFECTURE_NAMES_PROCESSING:\n      return { ...state, prefectureNameError: '', prefectureNamesLoading: true }\n\n    case FETCH_PREFECTURE_NAMES_SUCCESS: {\n      const prefectureState = action.prefectureNames.reduce((\n        prefectureState, { prefName, prefCode }\n      ) => {\n        prefectureState[prefCode] = {\n          name: prefName,\n          selected: false\n        }\n        return prefectureState\n      }, {})\n\n      return {\n        ...state,\n        prefectures: prefectureState,\n        prefectureNameError: '',\n        prefectureNamesLoading: false\n      }\n    }\n\n    case FETCH_PREFECTURE_NAMES_FAILED: return {\n      ...state,\n      prefectureNameError: action.error,\n      prefectureNamesLoading: false\n    }\n\n    case PREFECTURE_TOGGLED: {\n      const prefectures = { ...state.prefectures }\n      prefectures[action.prefCode].selected =\n        !prefectures[action.prefCode].selected\n\n      return { ...state, prefectures }\n    }\n\n    case FETCH_PREFECTURE_POPULATION_PROCESSING:\n      return { ...state, prefecturePopulationLoading: true }\n\n    case FETCH_PREFECTURE_POPULATION_SUCCESS: {\n      const prefectures = { ...state.prefectures }\n      prefectures[action.prefCode].populationData = action.populationData\n\n      return {\n        ...state,\n        prefectures,\n        prefecturePopulationError: '',\n        prefecturePopulationLoading: false\n      }\n    }\n\n    case FETCH_PREFECTURE_POPULATION_FAILED: return {\n      ...state,\n      prefecturePopulationError: action.error,\n      prefecturePopulationLoading: false\n    }\n\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport prefectureDataReducer from './prefectureData/reducer'\n\nexport default combineReducers({\n  prefectureData: prefectureDataReducer\n})\n","// prefectureDataのアクション\nexport const FETCH_PREFECTURE_NAMES_PROCESSING =\n  'fetch_prefecture_names_processing'\nexport const FETCH_PREFECTURE_NAMES_SUCCESS = 'fetch_prefecture_names_success'\nexport const FETCH_PREFECTURE_NAMES_FAILED = 'fetch_prefecture_names_failed'\nexport const PREFECTURE_TOGGLED = 'prefecture_toggled'\nexport const FETCH_PREFECTURE_POPULATION_PROCESSING =\n  'fetch_prefecture_population_processing'\nexport const FETCH_PREFECTURE_POPULATION_SUCCESS =\n  'fetch_prefecture_population_success'\nexport const FETCH_PREFECTURE_POPULATION_FAILED =\n  'fetch_prefecture_population_failed'\n","const apiUrl = 'https://opendata.resas-portal.go.jp/'\n\n/**\n * 地域経済分析システムAPIのラッパー\n * @param {string} path 具体的なAPIエンドポイント(GETリクエストを含む)\n * @return APIからのリスポンスのプロミス\n * @throws {Error}\n */\nconst fetchNationalStatistics = async path => {\n  const fullUrl = apiUrl + path\n  const response = await window.fetch(\n    fullUrl,\n    {\n      headers: {\n        'X-API-KEY': process.env.REACT_APP_RESAS_API_KEY\n      }\n    }\n  )\n\n  if (response.status !== 200) {\n    throw new Error(`${fullUrl} から${response.status}のリスポンスが返されました。`)\n  }\n\n  const json = await response.json()\n  if (!json.result) {\n    throw new Error(`${fullUrl} からのリスポンスのbodyの形式が間違っています。`)\n  }\n\n  return json.result\n}\n\n/**\n * 都道府県名を地域経済分析システムAPIから取得する用のラッパー\n * @return 都道府県名と都道府県番号を含むプロミス\n * @throws {Error}\n */\nconst fetchPrefectureNames = () =>\n  fetchNationalStatistics('api/v1/prefectures/')\n\n/**\n * 都道府県の人口データを地域経済分析システムAPIから取得する用のラッパー\n * @param {string|number} prefCode 都道府県コード\n * @param {string} populationType 人口の種類(総人口:'total', 年少人口: 'youth', 生産年齢人\n * 口: 'productiveAge', 老年人口: 'elderly')\n * @param {*} lowerYearBoundary 年下方境界\n * @param {*} upperYearBoundary 年上方境界\n * @return 都道府県人口データ含むプロミス\n * @throws {Error}\n */\nconst fetchPrefecturePopulation = async (\n  prefCode,\n  populationType,\n  lowerYearBoundary,\n  upperYearBoundary\n) => {\n  const populationTypes = {\n    total: 0,\n    youth: 1,\n    productiveAge: 2,\n    elderly: 3\n  }\n\n  const response = await fetchNationalStatistics(\n    `api/v1/population/composition/perYear?cityCode=-&prefCode=${prefCode}`\n  )\n\n  return response.data[populationTypes[populationType]].data.filter(\n    ({ year }) => year >= lowerYearBoundary && year <= upperYearBoundary\n  )\n}\n\nexport default {\n  fetchPrefectureNames,\n  fetchPrefecturePopulation\n}\n","import nationalStatistics from './nationalStatistics'\n\n/**\n * 全てのAPIラッパーのまとめ\n */\nexport default {\n  // 地域経済分析システムAPIのラッパーのまとめ\n  nationalStatistics\n}\n","import { put, takeEvery } from 'redux-saga/effects'\nimport api from 'api'\nimport {\n  FETCH_PREFECTURE_NAMES_PROCESSING,\n  FETCH_PREFECTURE_NAMES_SUCCESS,\n  FETCH_PREFECTURE_NAMES_FAILED,\n  PREFECTURE_TOGGLED,\n  FETCH_PREFECTURE_POPULATION_PROCESSING,\n  FETCH_PREFECTURE_POPULATION_SUCCESS,\n  FETCH_PREFECTURE_POPULATION_FAILED\n} from 'store/types'\n\nfunction * fetchPrefectureNames () {\n  try {\n    const prefectureNames = yield api.nationalStatistics.fetchPrefectureNames()\n    yield put({ type: FETCH_PREFECTURE_NAMES_SUCCESS, prefectureNames })\n  } catch (e) {\n    yield put({\n      type: FETCH_PREFECTURE_NAMES_FAILED,\n      error: 'データ取得に問題がありました。しばらくしてからもう一度お試しください。'\n    })\n    console.error(e)\n  }\n}\n\nfunction * fetchPrefecturePopulation ({ prefCode, shouldFetchPopulation }) {\n  try {\n    if (!shouldFetchPopulation) return\n    yield put({ type: FETCH_PREFECTURE_POPULATION_PROCESSING })\n    const populationData = yield api.nationalStatistics\n      .fetchPrefecturePopulation(prefCode, 'total', 1970, 2020)\n    yield put({\n      type: FETCH_PREFECTURE_POPULATION_SUCCESS,\n      prefCode,\n      populationData\n    })\n  } catch (e) {\n    // チェックボックスのマークを外す。\n    yield put({\n      type: PREFECTURE_TOGGLED,\n      prefCode,\n      shouldFetchPopulation: false\n    })\n    yield put({\n      type: FETCH_PREFECTURE_POPULATION_FAILED,\n      error: 'データ取得に問題がありました。しばらくしてからもう一度お試しください。'\n    })\n    console.error(e)\n  }\n}\n\nexport default function * prefectureDataWatcher () {\n  yield takeEvery(FETCH_PREFECTURE_NAMES_PROCESSING, fetchPrefectureNames)\n  yield takeEvery(PREFECTURE_TOGGLED, fetchPrefecturePopulation)\n}\n","import { call, all } from 'redux-saga/effects'\nimport prefectureDataWatcher from './prefectureData/saga'\n\nexport default function * rootSaga () {\n  yield all([prefectureDataWatcher].map(watcher => call(watcher)))\n}\n","import React from 'react'\nimport { FormControlLabel, Checkbox } from '@material-ui/core'\n\n/**\n * チェックボックスの一覧。\n * @param {object} フィルターで表示したいアイテムのデータ。nameとselectedというフィールド\n * が必須。nameはチェックオックス名、selectedは選択状況。\n * @param {() => object} クリックにより発動されるファンクション\n */\nexport const Filter = ({ items, onChange }) => (\n  <div className='filter'>\n    {\n      Object.entries(items).map(\n        ([id, { selected, name }]) => (\n          <FormControlLabel\n            className='filter-label'\n            key={'filter-' + id}\n            control={\n              <Checkbox\n                checked={selected}\n                onChange={onChange}\n                name={id}\n                color='primary'\n              />\n            }\n            label={name}\n          />\n        )\n      )\n    }\n  </div>\n)\n","import React from 'react'\nimport {\n  ResponsiveContainer,\n  LineChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Line\n} from 'recharts'\nimport { CircularProgress } from '@material-ui/core'\n\nconst colors = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042']\n\n/**\n * チャートを表示するコンポーネント\n * @param {object} props\n * @param {object[]} props.chartData チャートのデータ 例：[{name: 'a', value: 12}]\n * @param {string[]} props.legendNames チャートの凡例名\n * @param {boolean} props.processing チャートデータのロード状態\n * @param {string} props.messageOnEmpty 表示するデータがない時のメッセージ\n * @param {string} props.error データの取得に失敗した時のメッセージ\n */\nexport const Chart = ({\n  chartData,\n  legendNames,\n  processing,\n  messageOnEmpty,\n  error\n}) => {\n  if (error) return <div className='chart'>{error}</div>\n  if (processing) return <div className='chart'><CircularProgress /></div>\n  if (!legendNames.length) return <div className='chart'>{messageOnEmpty}</div>\n  return (\n    <div className='chart'>\n      <ResponsiveContainer>\n        <LineChart\n          data={chartData}\n          margin={{ top: 5, right: 20, left: 40, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray='3 3' />\n          <XAxis dataKey='name' />\n          <YAxis tickFormatter={tick => tick.toLocaleString()} />\n          <Tooltip formatter={value => value.toLocaleString()} />\n          <Legend align='right' verticalAlign='top' layout='vertical' />\n          {\n            legendNames.map((name, index) => (\n              <Line\n                dataKey={name}\n                key={`datakey-${name}`}\n                stroke={colors[index % colors.length]}\n              />\n            ))\n          }\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport {\n  fetchPrefectureNames,\n  togglePrefecture\n} from 'store/prefectureData/actions'\nimport './style.css'\nimport { Paper, CircularProgress } from '@material-ui/core'\nimport { Filter } from './filter/view'\nimport { Chart } from './chart/view'\n\n/**\n * Recharts用に都道府県データの形を変更する。\n * @param {object} prefectures 都道府県に関するデータ\n * @returns {object[]} Rechartsに使える形式の都道府県データ\n */\nconst formatChartData = prefectures => {\n  // 一時的に年ごとにオブジェクトで保管する ({ 1970: { 大阪: '123', 東京: '321' } })\n  const intermediaryObject = Object.values(prefectures)\n    .filter(({ populationData }) => populationData)\n    .reduce((chartData, { name, populationData }) => {\n      populationData.forEach(({ value, year }) => {\n        chartData[year] = { ...chartData[year], [name]: value }\n      })\n      return chartData\n    }, {})\n\n  return Object.entries(intermediaryObject)\n    .map(([year, values]) => {\n      values.name = year\n      return values\n    })\n}\n\nconst DataExplorerWrapper = ({ children }) => (\n  <Paper className='data-explorer'>\n    <h3>都道府県</h3>\n    <div className='data-explorer-contents'>\n      {children}\n    </div>\n  </Paper>\n)\n\n/**\n * 都道府県のデータを調べる為のコンポーネント。\n * @param {object} props\n * @param {object} props.prefectures 都道府県に関するデータ\n * @param {boolean} props.prefectureNamesLoading 都道府県名のロード状態\n * @param {boolean} props.prefecturePopulationLoading 都道府県人口ロード状態\n * @param {string} props.prefectureNameError 都道府県名取得に発生したエラーメッセージ\n * @param {string} props.prefecturePopulationError 都道府県人口取得に発生したエラーメ\n * ッセージ\n * @param {() => object} props.fetchPrefectureNames 都道府県名取得を開始するアクショ\n * ンクリエーター\n * @param {(event: object) => object} props.togglePrefecture 都道府県を選択する用の\n * アクションクリエーター\n */\nconst DataExplorerContainer = ({\n  prefectures,\n  prefectureNamesLoading,\n  prefecturePopulationLoading,\n  prefectureNameError,\n  prefecturePopulationError,\n  fetchPrefectureNames,\n  togglePrefecture\n}) => {\n  useEffect(() => {\n    fetchPrefectureNames()\n  }, [fetchPrefectureNames])\n\n  if (prefectureNameError) {\n    return <DataExplorerWrapper>{prefectureNameError}</DataExplorerWrapper>\n  }\n  if (prefectureNamesLoading) {\n    return <DataExplorerWrapper><CircularProgress /></DataExplorerWrapper>\n  }\n\n  return (\n    <DataExplorerWrapper>\n      <Filter\n        items={prefectures}\n        onChange={(event) => {\n          const prefCode = event.target.name\n          togglePrefecture(prefCode, !prefectures[prefCode].populationData)\n        }}\n      />\n      <Chart\n        chartData={formatChartData(prefectures)}\n        legendNames={\n          Object.values(prefectures)\n            .filter(({ selected }) => selected)\n            .map(({ name }) => name)\n        }\n        processing={prefecturePopulationLoading}\n        messageOnEmpty='都道府県を選択してください。'\n        error={prefecturePopulationError}\n      />\n    </DataExplorerWrapper>\n  )\n}\n\nconst mapStateToProps = ({ prefectureData }) => prefectureData\nconst mapDispatchToProps = { fetchPrefectureNames, togglePrefecture }\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DataExplorerContainer)\n","import {\n  FETCH_PREFECTURE_NAMES_PROCESSING,\n  PREFECTURE_TOGGLED\n} from 'store/types'\n\n/** 都道府県名取得を開始するアクションクリエーター */\nexport const fetchPrefectureNames = () => ({\n  type: FETCH_PREFECTURE_NAMES_PROCESSING\n})\n\n/**\n * 都道府県を選択する用のアクションクリエーター\n * @param {object} event チェックボックスのクリックにより発生するイベント\n * @param {boolean} 人口データ取得の必要性\n */\nexport const togglePrefecture = (prefCode, shouldFetchPopulation) => ({\n  type: PREFECTURE_TOGGLED,\n  prefCode,\n  shouldFetchPopulation\n})\n","import React from 'react'\nimport { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { Provider } from 'react-redux'\nimport createSagaMiddleware from 'redux-saga'\nimport reducers from 'store/reducers'\nimport rootSaga from 'store/sagas'\nimport DataExplorerContainer from 'app/dataExplorer/container'\nimport './style.css'\n\nconst sagaMiddleware = createSagaMiddleware()\nconst store = createStore(\n  reducers,\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\n)\nsagaMiddleware.run(rootSaga)\n\nconst App = () => (\n  <Provider store={store}>\n    <div className='app'>\n      <h1>都道府県別の総人口推移グラフ</h1>\n      <DataExplorerContainer />\n    </div>\n  </Provider>\n)\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './style.css'\nimport App from './app/app'\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}